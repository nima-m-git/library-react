{"version":3,"sources":["index.js"],"names":["BookTable","props","books","map","book","title","author","pages","read","id","key","onClick","readToggle","removeBook","BookForm","initialState","state","handleChange","bind","resetForm","bookSubmit","e","this","setState","target","name","value","preventDefault","Date","getTime","addBook","onSubmit","type","onChange","required","max","React","Component","Library","getBooks","Object","values","localStorage","JSON","parse","updateStorage","setItem","stringify","updateUI","bookToAdd","removeItem","getItem","sortedBooks","sort","a","b","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6b66ca3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/* TODO:\n- media query, fix element crunch\n- add localstorage / backend db\n- order-by choice for table\n*/\n\n\nconst BookTable = (props) => {\n  const renderTableData = () => {\n    return props.books.map((book) => {\n      const { title, author, pages, read, id, } = book;\n\n      return (\n        <tr key={id}>\n          <td>{title}</td>\n          <td>{author}</td>\n          <td>{pages}</td>\n          <td>{read}</td>\n          <td>\n            <button onClick={() => props.readToggle(id)}>read?</button>\n          </td>\n          <td>\n            <button onClick={() => props.removeBook(id)}>remove?</button>\n          </td>\n        </tr>\n      )\n    })\n\n  }\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Author</th>\n          <th>Pages</th>\n          <th>Read</th>\n          <th>Read?</th>\n          <th>Remove?</th>\n        </tr>\n      </thead>\n      <tbody>\n        {renderTableData()}\n      </tbody>\n    </table>\n  );\n}\n\nclass BookForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      title: '',\n      author: '',\n      pages: '',\n      read: 'no',\n    };\n    this.state = {\n      ...this.initialState,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n    this.bookSubmit = this.bookSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n  bookSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      id: (new Date()).getTime(),\n    })\n    this.props.addBook(this.state);\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.setState({...this.initialState})\n  }\n\n  render() {\n    return (\n      <form id='new-book' onSubmit={this.bookSubmit}>\n        <label>\n          Title: \n          <input\n            name='title'\n            type='text'\n            value={this.state.title}\n            onChange={this.handleChange} \n            required/>\n        </label>\n        <label>\n          Author:\n          <input\n            name='author'\n            type='text'\n            value={this.state.author}\n            onChange={this.handleChange} />\n        </label>\n        <label>\n          Pages:\n          <input\n            name='pages'\n            type='number'\n            value={this.state.pages}\n            max='2000'\n            onChange={this.handleChange} />\n        </label>\n        <label>\n          Read: \n          <select\n            name='read'\n            type='checkbox'\n            value={this.state.read}\n            onChange={this.handleChange} >\n            <option value='no'>No</option>\n            <option value='yes'>Yes</option>\n          </select>\n        </label>\n        <button type='submit'>Add Book</button>\n      </form>\n    );\n  }\n}\n\n\nclass Library extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getBooks = () => Object.values(localStorage).map(book => JSON.parse(book));\n    this.state = {\n      books: this.getBooks(),\n    }\n    this.updateStorage = this.updateStorage.bind(this);\n    this.addBook = this.addBook.bind(this);\n    this.removeBook = this.removeBook.bind(this);\n    this.readToggle = this.readToggle.bind(this);\n  }\n\n  // TODO: find alternative to rerender components on localstorage update\n  updateUI() {\n    this.setState({\n      books: this.getBooks()\n    })\n  }\n\n  updateStorage(book){\n    localStorage.setItem(book.id, JSON.stringify(book));\n    this.updateUI()\n  }\n\n  addBook(bookToAdd) {\n    this.updateStorage(bookToAdd);\n  }\n\n  removeBook(id) {\n    localStorage.removeItem(id);\n    this.updateUI()\n  }\n\n  readToggle(id) {\n    const book = JSON.parse(localStorage.getItem(id));\n    book.read = (book.read === \"yes\") ? \"no\" : \"yes\";\n    this.updateStorage(book)\n  }\n\n\n  render() {\n    const sortedBooks = this.state.books.sort((a, b) => (a.id > b.id)? 1 : -1);\n    return (\n      <div>\n        <section className='form'>\n          <BookForm addBook={this.addBook} />\n        </section>\n        <section className='table'> \n          <BookTable \n            books={sortedBooks} \n            removeBook={this.removeBook} \n            readToggle={this.readToggle}\n          />\n        </section>\n      </div>\n\n    );\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className='header'>\n      <h1>My Library</h1>\n    </div>\n    <Library />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}